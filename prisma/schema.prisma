generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id_user String @id @default(uuid())
  email String @unique @db.Char(100)
  senha String @unique
  tipo String
  status Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  empresa UserEmpresa?
  candidato UserCandidato?
}

model UserEmpresa{
  id_userEmpresa  String @id @default(uuid())
  id_endereco String @unique
  endereco Endereco @relation(fields: [id_endereco], references: [id_endereco])
  id_user String @unique
  user User @relation(fields: [id_user], references: [id_user])
  razaoSocial String @db.Char(100)
  nome_fantasia String @db.Char(100)
  cnpj String @unique @db.Char(14)
  ie String @unique @db.Char(16)
  telefone String @db.Char(11)
  CriaVaga CriarVaga[]
}

model UserCandidato{
  id_userCandidato String @id @default(uuid())
  id_endereco String @unique  
  endereco Endereco @relation(fields: [id_endereco], references: [id_endereco])
  id_user String @unique
  user User @relation(fields: [id_user], references: [id_user])
  nome String @db.Char(100) 
  sobrenome String @db.Char(100)
  cpf String @unique @db.Char(11)
  dataNascimento DateTime 
  telefone String @db.Char(11)
  candidatoVaga CandidatoVaga[]
  curriculo Curriculo_form?
}

model Curriculo_form {
  id_curriculoForm String @id @default(uuid())
  id_userCandidato String @unique 
  Candidato UserCandidato @relation(fields: [id_userCandidato], references: [id_userCandidato]) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nomeEmpresa String @db.Char(100)
  cargo String @db.Char(100)
  periodo String @db.Char(100)
  realizacoes String @db.Char(255)
  instituicao String @db.Char(100)
  grau String @db.Char(100)
  campoEstudo String @db.Char(100)
  periodoEstudo String @db.Char(100)
  competenciasExtracurricular String @db.LongText
  certificacoes String @db.LongText
  curriculo_anexo String? @default("SemCV")
}

model CandidatoVaga{
  id_inscricao String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id_userCandidato String @unique
  candidato UserCandidato @relation(fields: [id_userCandidato], references: [id_userCandidato])
  id_vaga String @unique
  vaga Vaga @relation(fields: [id_vaga], references: [id_vaga])
  dataInscricao DateTime
}

model Vaga{
  id_vaga String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  titulo String @db.Char(100)
  categoria String @db.Char(100)
  descricao String @db.LongText
  requisitos String @db.LongText
  dataAbertura DateTime
  dataFechamento DateTime
  CandidatoVaga CandidatoVaga[]
  CriaVaga CriarVaga[]
}

model CriarVaga {
  id_criaVaga String @id @default(uuid())
  id_userEmpresa String @unique
  Empresa UserEmpresa @relation(fields: [id_userEmpresa], references: [id_userEmpresa])
  id_vaga String @unique
  Vaga Vaga @relation(fields: [id_vaga], references: [id_vaga])
  dataCriacao DateTime
}

model Endereco {
  id_endereco String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pais String @db.Char(100)
  estado String @db.Char(20)
  cidade String @db.Char(100)
  bairro String @db.Char(100)
  logradouro String? 
  numero String  @db.Char(10)
  cep String @db.Char(8) 
  UserCandidato UserCandidato[]
  UserEmpresa UserEmpresa[]
}